@model EPiServer.Reference.Commerce.Site.Features.Checkout.ViewModels.CheckoutViewModel
@using EPiServer.Reference.Commerce.Site.Features.AddressBook.Helpers
@using LL.EpiserverCyberSourceConnector
@using LL.EpiserverCyberSourceConnector.Payments.CreditCard

@* Secure Acceptance form. This form will be submitted from front-end. In this way the Credit Card data will not hit the back-end. *@
<form action="https://testsecureacceptance.CyberSource.com/silent/pay" method="post" id="secure-acceptance-form"></form>

<script>
        @{
            var signedFields = SecureAcceptanceHelper.GetSignedFieldsValue();
            var cardTypeDictionary = CreditCardTypeStore.CardTypes;
            var countryCodes = AddressHelper.CountryCodes;
            var states = AddressHelper.StatesWithCode;
        }

        var cardTypes = @Html.Raw(Json.Encode(cardTypeDictionary));
        var countryCodes = @Html.Raw(Json.Encode(countryCodes));
        var states = @Html.Raw(Json.Encode(states));
        var isUserAuthenticated = "@User.Identity.IsAuthenticated" === "True";

        var processCreditCardSubmit = function(event) {
            event.preventDefault();

            var action = window.addPaymentOnCartEndpoint;
            var formData = new FormData(form);
            var xhr = new XMLHttpRequest();

            xhr.open('POST', action, true);
            xhr.send(formData);

            xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    if (this.status === 200) {
                        signFields();
                    } else {
                        console.log("sign fields error", this.response);
                    }
                }
            }
        }

        function signFields() {
            var address = {};

            if (!isUserAuthenticated) {

                address.firstName = document.getElementById("BillingAddress_FirstName").value;
                address.lastName = document.getElementById("BillingAddress_LastName").value;
                address.email = document.getElementById("BillingAddress_Email").value;
                address.addressLine1 = document.getElementById("BillingAddress_Line1").value;
                address.city = document.getElementById("BillingAddress_City").value;
                address.postalCode = document.getElementById("BillingAddress_PostalCode").value;

                var stateField = document.getElementById("BillingAddress_CountryRegion_Region");
                var stateValue = stateField.options[stateField.selectedIndex].text;
                address.state = states[stateValue];

                var countryField = document.getElementById("BillingAddress_CountryCode");
                var countryValue = countryField.options[countryField.selectedIndex].value;
                address.country = countryCodes[countryValue];

                var data = createDataObject(address);
                sign(data);
            } else {
                var addressField = document.getElementById("BillingAddress_AddressId");
                var addressId = addressField.options[addressField.selectedIndex].value;

                $.ajax({
                    url: '/Checkout/GetSelectedBillingAddress',
                    method: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        'addressId': addressId
                    })
                }).then(function (result) {
                    if (result) {
                        var customerAddress = result.address;
                        address.firstName = customerAddress.FirstName;
                        address.lastName = customerAddress.LastName;
                        address.email = customerAddress.Email;
                        address.addressLine1 = customerAddress.Line1;
                        address.city = customerAddress.City;
                        address.postalCode = customerAddress.PostalCode;
                        address.country = countryCodes[customerAddress.CountryCode];
                        address.state = states[customerAddress.CountryRegion.Region];

                        sign(createDataObject(address));
                    } else {
                            console.log("Address not found for the customer");
                        }
                    },
                    function (error) {
                        console.log("Error in GetSelectedBillingAddress", error);
                    });
            }
        }

        function createDataObject(address) {
            var accessKey = "@Model.CreditCardConfiguration.AccessKey";
            var profileId = "@Model.CreditCardConfiguration.ProfileId";
            var transactionType = "@Model.CreditCardConfiguration.SecureAcceptanceTransactionType";
            var unsignedFieldNames = "@Model.CreditCardConfiguration.UnsignedFields";
            var signedFieldNames = "@signedFields";
            var referenceNumber = new Date().getTime();
            var currency = document.getElementById("CurrencyCode").value;
            var languageField = document.getElementById("Language");
            var locale = languageField.options[languageField.selectedIndex].value;
            var amountValue = formatPrice(document.getElementById("total-price").nextSibling.textContent);

            var cardNumber = document.getElementById("credit-card-number").value;
            var cardTypeName = getCardType(cardNumber);
            var cardType = cardTypes[cardTypeName];
            var cardExpireMonth = document.getElementById("credit-card-expiration-month").value;
            var cardExpireYear = document.getElementById("credit-card-expiration-year").value;

            return {
                accessKey: accessKey,
                profileId: profileId,
                transactionType: transactionType,
                unsignedFieldNames: unsignedFieldNames,
                signedFieldNames: signedFieldNames,
                transactionUuid: "@Guid.NewGuid().ToString()",
                transactionDateTime: "@DateTime.Now.ToUniversalTime().ToString("yyyy-MM-dd'T'HH:mm:ss'Z'")",
                referenceNumber: referenceNumber,
                currency: currency,
                locale: locale,
                amount: amountValue,
                firstName: address.firstName,
                lastName: address.lastName,
                email: address.email,
                addressLine1: address.addressLine1,
                city: address.city,
                state: address.state,
                country: address.country,
                postalCode: address.postalCode,
                cardType: cardType,
                cardNumber: cardNumber.replace(/\s/g, ''),
                cardExpireYear: cardExpireYear,
                cardExpireMonth: cardExpireMonth,
                signFieldsUrl: "/SecureAcceptance/SignFields",
                secureAcceptanceFormId: "secure-acceptance-form"
            };
        }
</script>

<script src="~/Scripts/secure-acceptance-sample.js" type="text/javascript"></script>